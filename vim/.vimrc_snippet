" Neosnippet
" スニペットファイルの場所指定
let g:neosnippet#snippets_directory='~/.vim/snippets/'

" ファイル名で区別出来る場合は直接呼び出し
" ファイル名で区別できない場合は一旦関数に投げる
" augroup filetypedetect
"   autocmd!  BufEnter *_spec.rb NeoSnippetSource ~/.vim/snippets/rspec.snip
"   autocmd!  BufEnter *rb call s:LoadRailsSnippet()
" augroup END

" rails用スニペット呼び出し関数
" function! s:LoadRailsSnippet()

  " カレントディレクトリのディレクトリパス（絶対パス）取得
  " let s:current_file_path = expand("%:p:h")

  " appフォルダ内でなければ無視
  " if ( s:current_file_path !~ "app/" )
  "   return

  " app/modelsフォルダ内ならば
  " elseif ( s:current_file_path =~ "app/models" )
  "   NeoSnippetSource ~/.vim/snippets/model.rails.snip

  " app/controllersフォルダ内ならば
  " elseif ( s:current_file_path =~ "app/controllers" )
  "  NeoSnippetSource ~/.vim/snippets/controller.rails.snip

  " app/viewsフォルダ内ならば
  " elseif ( s:current_file_path =~ "app/views" )
  "   NeoSnippetSource ~/.vim/snippets/view.rails.snip

  " app/helpersフォルダ内ならば
  " elseif ( s:current_file_path =~ "app/helpers" )
  "   NeoSnippetSource ~/.vim/snippets/helper.rails.snip

  " app/assetsフォルダ内ならば
"   elseif ( s:current_file_path =~ "app/assets" )
"     NeoSnippetSource ~/.vim/snippets/asset.rails.snip
"   endif
" endfunction

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
